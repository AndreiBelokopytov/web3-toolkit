{"mappings":"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","sources":["src/index.tsx","src/components/index.ts","src/components/Address/index.ts","src/components/Address/Address.tsx","src/components/Balance/index.ts","src/components/Balance/Balance.tsx","src/utils.ts","src/hooks/index.ts","src/hooks/useAddress/index.ts","src/hooks/useAddress/useAddress.ts","src/providers/Web3Provider.tsx","src/hooks/useNetwork/index.ts","src/hooks/useNetwork/useNetwork.ts","src/hooks/useContract/index.ts","src/hooks/useContract/useContract.ts","src/hooks/useProvider/index.ts","src/hooks/useProvider/useProvider.ts","src/providers/index.ts","src/hooks/useSigner/index.ts","src/hooks/useSigner/useSigner.tsx","src/hooks/useMetaMask/index.ts","src/hooks/useMetaMask/useMetaMask.ts","src/walletApi/index.ts","src/walletApi/metaMask.ts","src/hooks/useMetaMask/useMetaMask.types.ts","src/hooks/useTokenBalance/index.ts","src/hooks/useTokenBalance/useTokenBalance.ts","src/hooks/useTokenMetadata/index.ts","src/hooks/useTokenMetadata/useTokenMetadata.tsx","src/hooks/useWalletBalance/index.ts","src/hooks/useWalletBalance/useWalletBalance.ts","src/types.ts"],"sourcesContent":["export * from './components';\nexport * from './hooks';\nexport * from './providers';\nexport * from './types';\n","export * from './Address';\nexport * from './Balance';\n","export * from './Address';\n","import React from 'react';\n\nconst DEFAULT_SUBSTRING_LENGTH = 6;\n\ntype Props = {\n  children: string;\n  substrLength?: number;\n};\n\nexport const Address = React.memo(\n  ({ children: address, substrLength }: Props) => {\n    return <span>{shortenAddress(address, substrLength)}</span>;\n  }\n);\n\nfunction shortenAddress(\n  address: string,\n  substrLength = DEFAULT_SUBSTRING_LENGTH\n) {\n  if (address.length <= substrLength * 2 || address.match(/.*\\.{3}.*/)) {\n    return address;\n  }\n\n  return `${address.slice(0, substrLength)}...${address.slice(\n    address.length - substrLength,\n    address.length\n  )}`;\n}\n","export * from './Balance';\n","import React, { memo } from 'react';\nimport { BigNumber, BigNumberish } from 'ethers';\nimport { formatUnits } from 'ethers/lib/utils';\nimport { assert } from '../../utils';\n\nconst DEFAULT_UNITS = 18;\n\ntype Props = {\n  value: BigNumber;\n  units?: BigNumberish;\n  fractionDigits?: number;\n};\n\nexport const Balance = memo(\n  ({ value, units = DEFAULT_UNITS, fractionDigits }: Props) => {\n    assert(\n      fractionDigits === undefined ||\n        (fractionDigits >= 0 && fractionDigits < units),\n      'invalid value for the \"fractionDigits\" attribute'\n    );\n    let formattedValue = formatUnits(value, units);\n    const fraction = formattedValue.split('.')[1];\n    if (fractionDigits && fraction.length > fractionDigits) {\n      formattedValue = formattedValue.slice(\n        0,\n        formattedValue.length - fraction.length + fractionDigits\n      );\n    }\n    return <span>{formattedValue}</span>;\n  }\n);\n","export const getErrorMessage = (error: unknown): string => {\n  let errorMessage = 'Unknown error';\n  if (error instanceof Error) {\n    errorMessage = error.message;\n  }\n  if (typeof error === 'string') {\n    errorMessage = error;\n  }\n  return errorMessage;\n};\n\nexport class AssertionError extends Error {}\n\nexport function assert(\n  condition: boolean,\n  msg?: string\n): asserts condition is true {\n  if (!condition) {\n    throw new AssertionError(msg);\n  }\n}\n","export * from './useAddress';\nexport * from './useNetwork';\nexport * from './useContract';\nexport * from './useMetaMask';\nexport * from './useProvider';\nexport * from './useSigner';\nexport * from './useTokenBalance';\nexport * from './useTokenMetadata';\nexport * from './useWalletBalance';\n","export * from './useAddress';\n","import { useWeb3 } from '../../providers/Web3Provider';\n\nexport const useAddress = () => {\n  const { address } = useWeb3();\n  return address;\n};\n","import { getDefaultProvider, Signer } from 'ethers';\nimport React, { createContext, useContext, useState } from 'react';\nimport { BaseProvider } from '../types';\n\nconst defaultChainDict: Record<string, string> = {\n  '0x1': 'Mainnet',\n  '0x3': 'Ropsten',\n  '0x4': 'Rinkeby',\n  '0x5': 'Goerli',\n  '0x2a': 'Kovan'\n};\n\nexport type Web3Context = {\n  address?: string;\n  chainId?: string;\n  chainDict: Record<string, string>;\n  provider: BaseProvider;\n  signer?: Signer;\n  setAddress: (address: string | undefined) => void;\n  setChainId: (chainID: string | undefined) => void;\n};\n\nconst defaultProvider = getDefaultProvider();\n\nconst Web3Context = createContext<Web3Context>({\n  setAddress: () => null,\n  setChainId: () => null,\n  chainDict: defaultChainDict,\n  provider: defaultProvider\n});\n\ntype Props = Partial<\n  Pick<Web3Context, 'address' | 'chainId' | 'provider' | 'chainDict' | 'signer'>\n> & {\n  children: React.ReactNode;\n};\n\nexport const Web3Provider = ({\n  children,\n  address: initialAddress,\n  chainId: initialChainId,\n  provider = defaultProvider,\n  signer,\n  chainDict = {}\n}: Props) => {\n  const [address, setAddress] = useState<string | undefined>(initialAddress);\n  const [chainId, setChainId] = useState<string | undefined>(initialChainId);\n\n  const context: Web3Context = {\n    address,\n    chainId,\n    setAddress,\n    setChainId,\n    provider,\n    signer,\n    chainDict: { ...defaultChainDict, ...chainDict }\n  };\n\n  return (\n    <Web3Context.Provider value={context}>{children}</Web3Context.Provider>\n  );\n};\n\nexport const useWeb3 = (): Web3Context => useContext(Web3Context);\n","export * from './useNetwork';\n","import { providers } from 'ethers';\nimport { useWeb3 } from '../../providers/Web3Provider';\n\nexport const useNetwork = (): providers.Network | undefined => {\n  const { chainId } = useWeb3();\n\n  if (!chainId) {\n    return undefined;\n  }\n\n  return providers.getNetwork(chainId);\n};\n","export * from './useContract';\n","import { Contract, ContractInterface } from 'ethers';\nimport { useCallback, useState } from 'react';\nimport { useProvider } from '../useProvider';\nimport { useSigner } from '../useSigner';\n\nexport const useContract = (\n  address: string,\n  abi: ContractInterface\n): [contract: Contract, connect: () => void] => {\n  const signer = useSigner();\n  const provider = useProvider();\n  const [contract, setContract] = useState(\n    new Contract(address, abi, provider)\n  );\n  const connect = useCallback(() => {\n    if (signer) {\n      setContract(contract.connect(signer));\n    }\n  }, [contract, signer]);\n  return [contract, connect];\n};\n","export * from './useProvider';\n","import { getDefaultProvider } from 'ethers';\nimport { useWeb3 } from '../../providers';\n\nexport const useProvider = (): ReturnType<typeof getDefaultProvider> => {\n  const { provider } = useWeb3();\n  return provider;\n};\n","export * from './Web3Provider';\n","export * from './useSigner';\n","import { useWeb3 } from '../../providers';\n\nexport const useSigner = () => {\n  const { signer } = useWeb3();\n  return signer;\n};\n","export * from './useMetaMask';\nexport * from './useMetaMask.types';\n","import { useCallback, useEffect, useState } from 'react';\nimport { useWeb3 } from '../../providers/Web3Provider';\nimport {\n  metaMask,\n  startOnboarding,\n  stopOnboarding,\n  isMetaMaskInstalled\n} from '../../walletApi';\nimport { getErrorMessage } from '../../utils';\n\nexport type OnBoardingStateStatus =\n  | 'notInstalled'\n  | 'notConnected'\n  | 'onboarding'\n  | 'connecting'\n  | 'connected';\n\ntype OnboardingState = {\n  status: OnBoardingStateStatus;\n  error?: string;\n};\n\ntype Result = OnboardingState & {\n  isNotInstalled: boolean;\n  isNotConnected: boolean;\n  isConnected: boolean;\n  isConnecting: boolean;\n  isOnboarding: boolean;\n  connect: () => void;\n  disconnect: () => void;\n};\n\nexport function useMetaMask(): Result {\n  const { setAddress, setChainId } = useWeb3();\n\n  const initialState: OnboardingState = isMetaMaskInstalled(metaMask)\n    ? {\n        status: 'notConnected'\n      }\n    : {\n        status: 'notInstalled'\n      };\n\n  const [onboardingState, setOnboardingState] =\n    useState<OnboardingState>(initialState);\n\n  const handleAccountsChanded = useCallback(\n    (accounts: string[]) => {\n      if (accounts.length > 0) {\n        setOnboardingState((prevState) => ({\n          ...prevState,\n          status: 'connected'\n        }));\n        setAddress(accounts[0]);\n      } else {\n        setOnboardingState((prevState) => ({\n          ...prevState,\n          status: 'notConnected'\n        }));\n        setAddress(undefined);\n      }\n\n      stopOnboarding();\n    },\n    [setAddress]\n  );\n\n  const handleChainChanged = useCallback(\n    (chainId?: string) => setChainId(chainId),\n    [setChainId]\n  );\n\n  useEffect(() => {\n    if (isMetaMaskInstalled(metaMask)) {\n      metaMask.on('accountsChanged', handleAccountsChanded);\n      metaMask.on('chainChanged', handleChainChanged);\n    }\n\n    return () => {\n      if (isMetaMaskInstalled(metaMask)) {\n        metaMask.removeListener('accountsChanged', handleAccountsChanded);\n        metaMask.removeListener('chainChanged', handleChainChanged);\n      }\n    };\n  }, [handleAccountsChanded, handleChainChanged]);\n\n  const connect = useCallback(async () => {\n    if (!isMetaMaskInstalled(metaMask)) {\n      setOnboardingState((prevState) => ({\n        ...prevState,\n        status: 'onboarding'\n      }));\n      startOnboarding();\n      return;\n    }\n\n    setOnboardingState((prevState) => ({\n      ...prevState,\n      status: 'connecting',\n      error: undefined\n    }));\n    try {\n      const accounts = await metaMask.request({\n        method: 'eth_requestAccounts'\n      });\n      handleAccountsChanded(accounts);\n      const chainId = await metaMask.request({\n        method: 'eth_chainId'\n      });\n      handleChainChanged(chainId);\n    } catch (err) {\n      setOnboardingState((prevState) => ({\n        ...prevState,\n        status: 'notConnected',\n        error: getErrorMessage(err)\n      }));\n    }\n  }, [handleAccountsChanded, handleChainChanged]);\n\n  const disconnect = useCallback(() => {\n    handleAccountsChanded([]);\n    handleChainChanged(undefined);\n  }, [handleAccountsChanded, handleChainChanged]);\n\n  return {\n    ...onboardingState,\n    isNotInstalled: onboardingState.status === 'notInstalled',\n    isNotConnected: onboardingState.status === 'notConnected',\n    isConnected: onboardingState.status === 'connected',\n    isConnecting: onboardingState.status === 'connecting',\n    isOnboarding: onboardingState.status === 'onboarding',\n    connect,\n    disconnect\n  };\n}\n","export * from './metaMask';\n","import MetaMaskOnboarding from '@metamask/onboarding';\nimport { MetaMask } from './metaMask.types';\n\nconst onboarding = new MetaMaskOnboarding();\n\nexport const metaMask: MetaMask | undefined = window.ethereum;\n\nexport const isMetaMaskInstalled = (\n  metaMask: MetaMask | undefined\n): metaMask is MetaMask => {\n  return MetaMaskOnboarding.isMetaMaskInstalled();\n};\n\nexport const startOnboarding = () => onboarding.startOnboarding();\n\nexport const stopOnboarding = () => onboarding.stopOnboarding();\n","type OnBoardingStateStatus =\n  | 'notInstalled'\n  | 'notConnected'\n  | 'onboarding'\n  | 'connecting'\n  | 'connected';\n\nexport type OnboardingState = {\n  status: OnBoardingStateStatus;\n  accounts: string[];\n};\n\nexport const OnboardingState = {\n  notInstalled(): OnboardingState {\n    return {\n      status: 'notInstalled',\n      accounts: []\n    };\n  },\n  notConnected(): OnboardingState {\n    return {\n      status: 'notConnected',\n      accounts: []\n    };\n  },\n  connected(accounts: string[]): OnboardingState {\n    return {\n      status: 'connected',\n      accounts\n    };\n  },\n  connecting(): OnboardingState {\n    return {\n      status: 'connecting',\n      accounts: []\n    };\n  },\n  onboarding(): OnboardingState {\n    return {\n      status: 'onboarding',\n      accounts: []\n    };\n  }\n};\n","export * from './useTokenBalance';\n","import { BigNumber } from 'ethers';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { getErrorMessage } from '../../utils';\nimport { useContract } from '../useContract';\n\ntype State = {\n  balance?: BigNumber;\n  isLoading: boolean;\n  error?: string;\n};\n\ntype Options = {\n  refreshOnTransfer?: boolean;\n};\n\ntype TokenBalance = State & {\n  refresh: () => void;\n};\n\nconst abi = ['function balanceOf(address owner) view returns (uint256)'];\n\nexport const useTokenBalance = (\n  contractAddress: string,\n  address: string,\n  { refreshOnTransfer }: Options | undefined = {}\n): TokenBalance => {\n  const [contract] = useContract(contractAddress, abi);\n  const filterTransferTo = useMemo(\n    () => contract.filters.Transfer(null, address),\n    [contract, address]\n  );\n  const filterTransferFrom = useMemo(\n    () => contract.filters.Transfer(address),\n    [contract, address]\n  );\n\n  const [state, setState] = useState<State>({\n    isLoading: true\n  });\n\n  const refresh = useCallback(async () => {\n    setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n      error: undefined\n    }));\n    try {\n      const balance = await contract.balanceOf(address);\n      setState((prevState) => ({\n        ...prevState,\n        balance,\n        isLoading: false\n      }));\n    } catch (err) {\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        error: getErrorMessage(err)\n      }));\n    }\n  }, [address, contract]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  useEffect(() => {\n    if (refreshOnTransfer) {\n      contract.on(filterTransferTo, refresh);\n      contract.on(filterTransferFrom, refresh);\n    }\n\n    return () => {\n      if (refreshOnTransfer) {\n        contract.off(filterTransferTo, refresh);\n        contract.off(filterTransferFrom, refresh);\n      }\n    };\n  }, [\n    contract,\n    filterTransferTo,\n    filterTransferFrom,\n    refreshOnTransfer,\n    refresh\n  ]);\n\n  return { ...state, refresh };\n};\n","export * from './useTokenMetadata';\n","import { BigNumber } from 'ethers';\nimport { useEffect, useState } from 'react';\nimport { getErrorMessage } from '../../utils';\nimport { useContract } from '../useContract';\n\nconst abi = ['function tokenURI(uint256 tokenId) view returns (string)'];\n\ntype TokenMetadata = {\n  name: string;\n  description: string;\n  image?: string;\n};\n\ntype TokenMetadataState<T extends TokenMetadata> = {\n  metadata?: T;\n  isLoading: boolean;\n  error?: string;\n};\n\nconst asDataUrl = (url: string): string | undefined => {\n  const found = url.match(/^data:application\\/json;base64,(.+)/);\n  return found?.[1];\n};\n\nexport const useTokenMetadata = <T extends TokenMetadata>(\n  contractAddress: string,\n  tokenId: BigNumber\n): TokenMetadataState<T> => {\n  const [contract] = useContract(contractAddress, abi);\n\n  const [state, setState] = useState<TokenMetadataState<T>>({\n    isLoading: false\n  });\n\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      setState((prevState) => ({\n        ...prevState,\n        error: undefined,\n        isLoading: true\n      }));\n      try {\n        let metadata: T;\n        const tokenUri: string = await contract.tokenURI(tokenId);\n        const base64Data = asDataUrl(tokenUri);\n        if (base64Data) {\n          metadata = JSON.parse(atob(base64Data));\n        } else {\n          const response = await fetch(tokenUri);\n          if (!response.ok) {\n            throw new Error(\n              `Network response was not OK, status: ${response.status}`\n            );\n          }\n          metadata = await response.json();\n        }\n        setState((prevState) => ({\n          ...prevState,\n          isLoading: false,\n          metadata\n        }));\n      } catch (error) {\n        setState((prevState) => ({\n          ...prevState,\n          error: getErrorMessage(error),\n          isLoading: false\n        }));\n      }\n    };\n    fetchMetadata();\n  }, [contract, tokenId]);\n\n  return state;\n};\n","export * from './useWalletBalance';\n","import { BigNumber } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\nimport { getErrorMessage } from '../../utils';\nimport { useProvider } from '../useProvider';\n\ntype State = {\n  balance?: BigNumber;\n  isLoading: boolean;\n  error?: string;\n};\n\ntype Options = {\n  refreshOnBlock?: boolean;\n};\n\nexport const useWalletBalance = (\n  address: string,\n  { refreshOnBlock }: Options | undefined = {}\n): State => {\n  const [state, setState] = useState<State>({\n    isLoading: false\n  });\n  const provider = useProvider();\n\n  const fetchBalance = useCallback(async () => {\n    setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n      error: undefined\n    }));\n    try {\n      const balance = await provider.getBalance(address);\n      setState((prevState) => ({\n        ...prevState,\n        balance,\n        isLoading: false\n      }));\n    } catch (err) {\n      setState((prevState) => ({\n        ...prevState,\n        isLoading: false,\n        error: getErrorMessage(err)\n      }));\n    }\n  }, [address, provider]);\n\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n\n  useEffect(() => {\n    if (refreshOnBlock) {\n      provider.on('block', fetchBalance);\n    }\n    return () => {\n      if (refreshOnBlock) {\n        provider.off('block', fetchBalance);\n      }\n    };\n  }, [provider, fetchBalance, refreshOnBlock]);\n\n  return state;\n};\n","import { getDefaultProvider } from 'ethers';\n\nexport type BaseProvider = ReturnType<typeof getDefaultProvider>;\n"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}