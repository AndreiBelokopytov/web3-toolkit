{"mappings":"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","sources":["src/index.tsx","src/components/index.ts","src/components/Address/index.ts","src/components/Address/Address.tsx","src/hooks/index.ts","src/hooks/useMetaMask/index.ts","src/hooks/useMetaMask/useMetaMask.ts","src/providers/index.ts","src/providers/metaMaskProvider.ts","src/hooks/useMetaMask/useMetaMask.types.ts","src/hooks/useTokenBalance/index.ts","src/hooks/useTokenBalance/useTokenBalance.ts"],"sourcesContent":["export * from './components';\nexport * from './hooks';\nexport * from './providers';\n","export * from './Address';\n","export * from './Address';\n","import React from 'react';\n\nconst DEFAULT_SUBSTRING_LENGTH = 6;\n\ntype Props = {\n  children: string;\n  substrLength?: number;\n};\n\nexport const Address = React.memo(\n  ({ children: address, substrLength }: Props) => {\n    return <span>{shortenAddress(address, substrLength)}</span>;\n  }\n);\n\nfunction shortenAddress(\n  address: string,\n  substrLength = DEFAULT_SUBSTRING_LENGTH\n) {\n  if (address.length <= substrLength * 2 || address.match(/.*\\.{3}.*/)) {\n    return address;\n  }\n\n  return `${address.slice(0, substrLength)}...${address.slice(\n    address.length - substrLength,\n    address.length\n  )}`;\n}\n","export * from './useMetaMask';\nexport * from './useTokenBalance';\n","export * from './useMetaMask';\nexport * from './useMetaMask.types';\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport MetaMaskOnboarding from '@metamask/onboarding';\nimport { metaMaskProvider } from '../../providers';\n\nexport type OnBoardingStateStatus =\n  | 'notInstalled'\n  | 'notConnected'\n  | 'onboarding'\n  | 'connecting'\n  | 'connected';\n\ntype OnboardingState = {\n  status: OnBoardingStateStatus;\n  accounts: string[];\n  chainId?: string;\n  error?: string;\n};\n\ntype Result = OnboardingState & {\n  isNotInstalled: boolean;\n  isNotConnected: boolean;\n  isConnected: boolean;\n  isConnecting: boolean;\n  isOnboarding: boolean;\n  connect: () => void;\n};\n\nexport function useMetaMask(): Result {\n  const metaMaskOnboarding = useRef<MetaMaskOnboarding>(\n    new MetaMaskOnboarding()\n  );\n\n  const initialState: OnboardingState = MetaMaskOnboarding.isMetaMaskInstalled()\n    ? {\n        status: 'notConnected',\n        accounts: []\n      }\n    : {\n        status: 'notInstalled',\n        accounts: []\n      };\n\n  const [onboardingState, setOnboardingState] =\n    useState<OnboardingState>(initialState);\n\n  const handleAccountsChanded = useCallback(\n    (accounts: string[]) => {\n      if (accounts.length > 0) {\n        setOnboardingState((prevState) => ({\n          ...prevState,\n          status: 'connected',\n          accounts\n        }));\n      } else {\n        setOnboardingState((prevState) => ({\n          ...prevState,\n          status: 'notConnected',\n          accounts: []\n        }));\n      }\n\n      metaMaskOnboarding.current?.stopOnboarding();\n    },\n    [setOnboardingState]\n  );\n\n  const handleChainChanged = useCallback(\n    (chainId: string) =>\n      setOnboardingState((prevState) => ({\n        ...prevState,\n        chainId\n      })),\n    []\n  );\n\n  useEffect(() => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      metaMaskProvider.on('accountsChanged', handleAccountsChanded);\n      metaMaskProvider.on('chainChanged', handleChainChanged);\n    }\n\n    return () => {\n      if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n        metaMaskProvider.removeListener(\n          'accountsChanged',\n          handleAccountsChanded\n        );\n        metaMaskProvider.removeListener('chainChanged', handleChainChanged);\n      }\n    };\n  }, [handleAccountsChanded, handleChainChanged]);\n\n  const connect = useCallback(async () => {\n    if (!MetaMaskOnboarding.isMetaMaskInstalled()) {\n      setOnboardingState((prevState) => ({\n        ...prevState,\n        status: 'onboarding',\n        accounts: []\n      }));\n      metaMaskOnboarding.current?.startOnboarding();\n      return;\n    }\n\n    setOnboardingState((prevState) => ({\n      ...prevState,\n      status: 'connecting',\n      accounts: [],\n      error: undefined\n    }));\n    try {\n      const accounts = await metaMaskProvider.request({\n        method: 'eth_requestAccounts'\n      });\n      handleAccountsChanded(accounts);\n      const chainId = await metaMaskProvider.request({\n        method: 'eth_chainId'\n      });\n      handleChainChanged(chainId);\n    } catch (err) {\n      let message: string | undefined;\n      if (err instanceof Error) {\n        message = err?.message;\n      }\n      if (typeof err === 'string') {\n        message = err;\n      }\n      setOnboardingState((prevState) => ({\n        ...prevState,\n        status: 'notConnected',\n        error: message\n      }));\n    }\n  }, [handleAccountsChanded, handleChainChanged]);\n\n  return {\n    ...onboardingState,\n    isNotInstalled: onboardingState.status === 'notInstalled',\n    isNotConnected: onboardingState.status === 'notConnected',\n    isConnected: onboardingState.status === 'connected',\n    isConnecting: onboardingState.status === 'connecting',\n    isOnboarding: onboardingState.status === 'onboarding',\n    connect\n  };\n}\n","export * from './metaMaskProvider';\n","import events from 'events';\n\nexport type MetaMaskProvider = Omit<events.EventEmitter, 'off'> & {\n  request(options: { method: string }): Promise<any>;\n};\n\nexport const metaMaskProvider: MetaMaskProvider = (window as any).ethereum;\n","type OnBoardingStateStatus =\n  | 'notInstalled'\n  | 'notConnected'\n  | 'onboarding'\n  | 'connecting'\n  | 'connected';\n\nexport type OnboardingState = {\n  status: OnBoardingStateStatus;\n  accounts: string[];\n};\n\nexport const OnboardingState = {\n  notInstalled(): OnboardingState {\n    return {\n      status: 'notInstalled',\n      accounts: []\n    };\n  },\n  notConnected(): OnboardingState {\n    return {\n      status: 'notConnected',\n      accounts: []\n    };\n  },\n  connected(accounts: string[]): OnboardingState {\n    return {\n      status: 'connected',\n      accounts\n    };\n  },\n  connecting(): OnboardingState {\n    return {\n      status: 'connecting',\n      accounts: []\n    };\n  },\n  onboarding(): OnboardingState {\n    return {\n      status: 'onboarding',\n      accounts: []\n    };\n  }\n};\n","export * from './useTokenBalance';\n","import { BigNumber, Contract, getDefaultProvider } from 'ethers';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\ntype TokenBalanceState = {\n  balance: BigNumber;\n  isLoading: boolean;\n  errorMessage?: string;\n};\n\ntype TokenBalance = TokenBalanceState & {\n  refresh: () => void;\n};\n\nconst abi = [\n  'function balanceOf(address owner) view returns (uint256)',\n  'function decimals() view returns (uint8)',\n  'function symbol() view returns (string)',\n  'function transfer(address to, uint amount) returns (bool)',\n  'event Transfer(address indexed from, address indexed to, uint amount)'\n];\n\nexport const useTokenBalance = (\n  contractAddress: string,\n  address: string,\n  provider: ReturnType<typeof getDefaultProvider>\n): TokenBalance => {\n  const contract = useMemo(() => {\n    return new Contract(contractAddress, abi, provider);\n  }, [contractAddress, provider]);\n\n  const [state, setState] = useState<TokenBalanceState>({\n    balance: BigNumber.from(0),\n    isLoading: true\n  });\n\n  const refresh = useCallback(async () => {\n    setState((prevState) => ({\n      ...prevState,\n      isLoading: true,\n      errorMessage: undefined\n    }));\n    try {\n      const balance = await contract.balanceOf(address);\n      setState((prevState) => ({\n        ...prevState,\n        balance,\n        isLoading: false\n      }));\n    } catch (err) {\n      let errorMessage: string | undefined;\n      if (err instanceof Error) {\n        errorMessage = err.message;\n      }\n      if (typeof err === 'string') {\n        errorMessage = err;\n      }\n      setState((prevState) => ({\n        ...prevState,\n        errorMessage\n      }));\n    }\n  }, [address, contract]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh]);\n\n  return { ...state, refresh };\n};\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}